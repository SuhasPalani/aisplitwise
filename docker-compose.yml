services:

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 45s

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  auth_service:
    build: ./backend/auth_service
    container_name: auth_service
    env_file: ./backend/auth_service/.env
    ports:
      - "8001:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  user_service:
    build: ./backend/user_service
    container_name: user_service
    env_file: ./backend/user_service/.env
    ports:
      - "8002:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  group_service:
    build: ./backend/group_service
    container_name: group_service
    env_file: ./backend/group_service/.env
    ports:
      - "8003:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  expense_service:
    build: ./backend/expense_service
    container_name: expense_service
    env_file: ./backend/expense_service/.env
    ports:
      - "8004:8000"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  ai_splitter_service:
    build: ./backend/ai_splitter_service
    container_name: ai_splitter_service
    env_file: ./backend/ai_splitter_service/.env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - splitwise_network
    # Removed healthcheck as it's a background worker

  payment_service:
    build: ./backend/payment_service
    container_name: payment_service
    env_file: ./backend/payment_service/.env
    ports:
      - "8005:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - splitwise_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  reporting_service:
    build: ./backend/reporting_service
    container_name: reporting_service
    env_file: ./backend/reporting_service/.env
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - splitwise_network
    # Removed healthcheck as it's a background worker

volumes:
  mongo_data:
  rabbitmq_data:

networks:
  splitwise_network:
    driver: bridge